services:

  service-registry:
    image: 'service-registry:latest'
    container_name: service-registry
    ports:
      - '8761:8761'
    networks:
      - backend

  api-gateway:
    image: 'api-gateway:latest'
    mem_limit: 700m
    container_name: api-gateway
    ports:
      - '9191:9191'
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      - SPRING_APPLICATION_NAME=API-GATEWAY
      - SPRING_PROFILES_ACTIVE=default
      - EUREKA_SERVER_ADDRESS=http://service-registry:8761/eureka
      - spring.cloud.gateway.globalcors.cors-configurations[0].allowed-origins=*
      - spring.cloud.gateway.globalcors.cors-configurations[0].allowed-methods=GET,POST,PUT,DELETE
      - spring.cloud.gateway.routes[0].id=EMPLOYEE-SERVICE
      - spring.cloud.gateway.routes[0].uri=lb://EMPLOYEE-SERVICE
      - spring.cloud.gateway.routes[0].predicates[0]=Path=/api/employee/**
      - spring.cloud.gateway.routes[1].id=DEPARTMENT-SERVICE
      - spring.cloud.gateway.routes[1].uri=lb://DEPARTMENT-SERVICE
      - spring.cloud.gateway.routes[1].predicates[0]=Path=/api/department/**,/message/**
      - spring.cloud.gateway.routes[2].id=ORGANIZATION-SERVICE
      - spring.cloud.gateway.routes[2].uri=lb://ORGANIZATION-SERVICE
      - spring.cloud.gateway.routes[2].predicates[0]=Path=/api/organization/**
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://api-gateway:9191/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      service-registry:
        condition: service_started
    networks:
      - backend


  config-server:
    image: 'config-server:latest'
    container_name: config-server
    ports:
      - '8888:8888'
    environment:
      - EUREKA_SERVER_ADDRESS=http://service-registry:8761/eureka
#      - API_GATEWAY_URL=http://api-gateway:9191
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://config-server:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      api-gateway:
        condition: service_started
    networks:
      - backend


  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq
    ports:
      - "5672:5672"    # RabbitMQ port
      - "15672:15672"  # RabbitMQ Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq   # Persist RabbitMQ data
    environment:
      - RABBITMQ_DEFAULT_USER=guest      # Default user (can be changed)
      - RABBITMQ_DEFAULT_PASS=guest      # Default password (can be changed)
    networks:
      - backend

  employee-service:
    image: 'employee-service:latest'
    container_name: employee-service
    ports:
      - '9091:9091'
    environment:
      - EUREKA_SERVER_ADDRESS=http://service-registry:8761/eureka
      - CONFIG_SERVER_URL=http://config-server:8888
      - API_GATEWAY_URL=http://api-gateway:9191
      - spring.datasource.url=jdbc:mysql://database:3306/employee?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Turkey
      - spring.datasource.username=root
      - spring.datasource.password=root
      - spring.jpa.hibernate.ddl-auto=update
      - spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
      - spring.datasource.initialization-mode=always
    depends_on:
      database:
        condition: service_started
      api-gateway:
        condition: service_started
      config-server:
        condition: service_started
      zipkin:
        condition: service_healthy
    networks:
      - backend

  department-service:
    image: 'department-service:latest'
    container_name: department-service
    ports:
      - '9090:9090'
    environment:
      - EUREKA_SERVER_ADDRESS=http://service-registry:8761/eureka
      - API_GATEWAY_URL=http://api-gateway:9191
      - CONFIG_SERVER_URL=http://config-server:8888
      - spring.datasource.url=jdbc:mysql://database:3306/depart?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Turkey
      - spring.datasource.username=root
      - spring.datasource.password=root
      - spring.jpa.hibernate.ddl-auto=update
      - spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
      - spring.datasource.initialization-mode=always
    depends_on:
      database:
        condition: service_started
      api-gateway:
        condition: service_started
      config-server:
        condition: service_started
      zipkin:
        condition: service_healthy
    networks:
      - backend

  organization-service:
    image: 'organization-service:latest'
    container_name: organization-service
    ports:
      - '8083:8083'
    environment:
      - EUREKA_SERVER_ADDRESS=http://service-registry:8761/eureka
      - API_GATEWAY_URL=http://api-gateway:9191
      - CONFIG_SERVER_URL=http://config-server:8888
      - spring.datasource.url=jdbc:mysql://database:3306/org?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Turkey
      - spring.datasource.username=root
      - spring.datasource.password=root
      - spring.jpa.hibernate.ddl-auto=update
      - spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
      - spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect
      - spring.datasource.initialization-mode=always
    depends_on:
      database:
        condition: service_started
      api-gateway:
        condition: service_started
      config-server:
        condition: service_started
      zipkin:
        condition: service_healthy
    networks:
      - backend

  database:
    container_name: database
    image: 'mysql:latest'
    ports:
      - "3306:3306"
    environment:
      MYSQL_PASSWORD: root
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  db-data:
  rabbitmq_data: